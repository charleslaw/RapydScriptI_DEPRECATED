/* This file was auto-generated using RapydScript */
(function(){
add = function(a, b) {
  return (a + b);
};

mult = (function(a, b) {
  return (a * b);
});
function() {
  
}

quadratic1 = (function(a, b, c) {
  var root, x0, x1;
  root = Math.sqrt(((b * b) - ((4 * a) * c)));
  x0 = (((-b) + root) / (2 * a));
  x1 = (((-b) - root) / (2 * a));
  return [x0, x1];
});
quadratic2 = (function(a, b, c) {
  var root, x0, x1;
  root = Math.sqrt(((b * b) - ((4 * a) * c)));
  x0 = (((-b) + root) / (2 * a));
  x1 = (((-b) - root) / (2 * a));
  return [x0, x1];
});
quadratic2 = (function(a, b, c) {
  var root, x0, x1;
  root = Math.sqrt(((b * b) - ((4 * a) * c)));
  x0 = (((-b) + root) / (2 * a));
  x1 = (((-b) - root) / (2 * a));
  return [x0, x1];
});
takes2Funcs((function(x, y) {
  return (x + y);
}), (function(x, y) {
  return (x * y);
}));
takes2Funcs((function(x, y) {
  return (x + y);
}), (function(x, y) {
  return (x * y);
}));
math_ops = {
  add: (function(a, b) {
    return (a + b);
  }),
  sub: (function(a, b) {
    return (a - b);
  }),
  mul: (function(a, b) {
    return (a * b);
  }),
  div: (function(a, b) {
    return (a / b);
  }),
  roots: (function(a, b, c) {
    var d, r;
    r = Math.sqrt(((b * b) - ((4 * a) * c)));
    d = (2 * a);
    return [(((-b) + r) / d), (((-b) - r) / d)];
  })
};
stararg1 = function() {
  var a, args;
  args = [].slice.call(arguments, 0);
  var _$tmp1_data = _$rapyd$_iter(args);
  var _$tmp2_len = _$tmp1_data.length;
  for (var _$tmp3_index = 0; _$tmp3_index < _$tmp2_len; _$tmp3_index++) {
    a = _$tmp1_data[_$tmp3_index];

    _$rapyd$_print(a);
  }

};

startarg2 = function() {
  var a, b, c;
  a = arguments[0];
  b = arguments[1];
  c = [].slice.call(arguments, 2);
  stararg1(a, b);
  stararg1.apply(this, [].concat(c));
};


}());